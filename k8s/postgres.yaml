apiVersion: v1
kind: ConfigMap
metadata:
  namespace: messaging
  name: postgres-config
  labels:
    app: postgres
data:
  POSTGRES_DB: vernemq_db
  POSTGRES_USER: vernemq
  POSTGRES_PASSWORD: postgres!
  PGDATA: /var/lib/postgresql/data/pgdata
  init.sql: |
    CREATE EXTENSION pgcrypto;

    CREATE TABLE vmq_auth_acl
    (
      mountpoint character varying(10) NOT NULL,
      client_id character varying(128) NOT NULL,
      username character varying(128) NOT NULL,
      password character varying(128),
      publish_acl json,
      subscribe_acl json,
      CONSTRAINT vmq_auth_acl_primary_key PRIMARY KEY (mountpoint, client_id, username)
    );

    WITH x AS (
        SELECT
            ''::text AS mountpoint,
              'test-client'::text AS client_id,
              'test-user'::text AS username,
              'userPass'::text AS password,
              gen_salt('bf')::text AS salt,
              '[{"pattern": "test"}, {"pattern": "foo/#"}]'::json AS publish_acl,
              '[{"pattern": "test"}, {"pattern": "foo/#"}]'::json AS subscribe_acl
        ) 
    INSERT INTO vmq_auth_acl (mountpoint, client_id, username, password, publish_acl, subscribe_acl)
        SELECT 
            x.mountpoint,
            x.client_id,
            x.username,
            crypt(x.password, x.salt),
            publish_acl,
            subscribe_acl
        FROM x;
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: messaging
  name: postgres
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      terminationGracePeriodSeconds: 10
      volumes:
      - name: postgres-config
        configMap:
          name: postgres-config
      containers:
        - name: postgres
          image: postgres:11-alpine
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: postgres-config
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - exec pg_isready --host $POD_IP
            failureThreshold: 6
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - exec pg_isready --host $POD_IP
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          volumeMounts:
            - name: postgres-config
              mountPath: /docker-entrypoint-initdb.d/init.sql
              subPath: init.sql
        #  volumeMounts:
        #    - mountPath: /var/lib/postgresql/data/pgdata
        #      name: postgres-messaging
        #      subPath: postgres-db
  #volumeClaimTemplates:
  #  - metadata:
  #      name: postgres-messaging
  #    spec:
  #      accessModes: ["ReadWriteOnce"]
  #      resources:
  #        requests:
  #          storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: postgres
  namespace: messaging
  name: postgres-svc
spec:
  clusterIP: None
  ports:
  - name: postgres-svc
    port: 5432
    protocol: TCP
    targetPort: 5432
  selector:
    app: postgres
  sessionAffinity: None
  type: ClusterIP